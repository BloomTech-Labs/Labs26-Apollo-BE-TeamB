package com.lambdaschool.apollo.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.lambdaschool.apollo.views.QuestionType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;

@ApiModel(value = "Question", description = "Question model")
@Entity
@Table(name = "questions")
public class Question extends Auditable {

    /**
     * The primary key (long) of the questions table.
     */
    @ApiModelProperty(name = "question id", value = "primary key for question")
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long questionid;

    /**
     * The body (String) describes the question. Cannot be null
     */
    @ApiModelProperty(name = "body", value = "question body")
    @NotNull
    @Column(nullable = false)
    private String body;

    /**
     * The isLeader (boolean) differs leader questions. Cannot be null
     */
    @ApiModelProperty(name = "isleader", value = "True if this question is a context question")
    @NotNull
    @Column(nullable = false)
    private boolean isLeader;

    /**
     * The type (String) of question. Cannot be null
     */
    @ApiModelProperty(name = "type", value = "questions type (e.g. text, star rating, etc.)")
    @NotNull
    @Column(nullable = false)
    private QuestionType type;

    /**
     * A list of contexts the question is associated with
     */
    @ApiModelProperty(name = "context type", value = "context types for this question")
    @ManyToMany(mappedBy = "contextquestions")
    @JsonIgnore
    private List<Context> contexts = new ArrayList<>();

    /**
     * The surveyid of the survey assigned to this question is what is stored in the database.
     * This is the entire survey object!
     * <p>
     * Forms a Many to One relationship between questions and survey.
     * A survey can have many questions.
     */
    @ApiModelProperty(name = "survey", value = "survey attached to this question")
    @ManyToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "surveyid")
    @JsonIgnoreProperties(value = {"questions", "topic", "defaulttopic"}, allowSetters = true)
    private Survey survey;

    @ApiModelProperty(name = "answer", value = "answers for this question")
    @OneToMany(mappedBy = "question", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties(value = {"question", "survey"}, allowSetters = true)
    private List<Answer> answers;

    /**
     * Default constructor used primarily by the JPA.
     */
    public Question() {
    }

    /**
     * Given the params, create a new question object
     * <p>
     * questionid is autogenerated
     *
     * @param body     The body (String) of the question
     * @param isLeader The isLeader (boolean) of the question
     * @param type     The type (String) of the question
     * @param survey   The survey (Survey) connected to the question
     */
    public Question(String body, boolean isLeader, QuestionType type, Survey survey) {
        setBody(body);
        setLeader(isLeader);
        setType(type);
        setSurvey(survey);
        this.answers = new ArrayList<>();
    }

    /**
     * Getter for questionid
     *
     * @return the questionid (long) of the question
     */
    public long getQuestionid() {
        return questionid;
    }

    /**
     * Setter for questionid. Used primary for seeding data
     *
     * @param questionid the new questionid (long) of the question
     */
    public void setQuestionid(long questionid) {
        this.questionid = questionid;
    }

    /**
     * Getter for body
     *
     * @return the body (String) of the question
     */
    public String getBody() {
        return body;
    }

    /**
     * Setter for body. Used primary for seeding data
     *
     * @param body the new body (String) of the question
     */
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Getter for isLeader
     *
     * @return the isLeader (boolean) of the question
     */
    public boolean isLeader() {
        return isLeader;
    }

    /**
     * Setter for isLeader. Used primary for seeding data
     *
     * @param leader the new isLeader (boolean) of the question
     */
    public void setLeader(boolean leader) {
        isLeader = leader;
    }

    /**
     * Getter for type
     *
     * @return the type (String) of the question
     */
    public QuestionType getType() {
        return type;
    }

    /**
     * Setter for type. Used primary for seeding data
     *
     * @param type the new type (String) of the question
     */
    public void setType(QuestionType type) {
        this.type = type;
    }

    public Survey getSurvey() {
        return survey;
    }

    public void setSurvey(Survey survey) {
        this.survey = survey;
    }

    public List<Answer> getAnswers() {
        return answers;
    }

    public void setAnswers(List<Answer> answers) {
        this.answers = answers;
    }

    @Override
    public String toString() {
        return "Question{" +
                "questionid=" + questionid +
                ", body='" + body + '\'' +
                ", isLeader=" + isLeader +
                ", type=" + type +
                ", contexts=" + contexts +
                ", survey=" + survey.getSurveyid() +
                ", answers=" + answers +
                '}';
    }
}
